---
title: "Lab 7 Assignement: Group 20"
author: Antoine Andréoletti (s242830), Olivier Gaufrès (s243252), Amy Surry (s201902), Lea Skytthe (s203531), Trine Søgaard (s204655)
format:
  html:
    embed-resources: true
editor: visual
---

## Data

The data we are using in this exercise comes from a paper from Gravier et al. (2020) and is available here: <https://github.com/ramhiser/datamicroarray/raw/master/data/gravier.RData>.

## Load Libraries

```{r}
#| message: False

library("tidyverse")
library("broom")
library("cowplot")
```

## Load data

```{r}
#| message: False

raw_dir <- "data/"
data_file <- "gravier.RData"
data_loc <- "https://github.com/ramhiser/datamicroarray/raw/master/data/"

if( !dir.exists(raw_dir) ){
  dir.create(path = raw_dir)
}
if( !file.exists(str_c(raw_dir, data_file)) ){
  download.file(
    url = str_c(data_loc, data_file),
    destfile = str_c(raw_dir, data_file))
}
load(file = str_c(raw_dir, data_file))
```

## Analyse data

We convert the data to tibble

```{r}
gravier_tibble <- gravier |>
  bind_cols() |> 
  as_tibble()
```

## Look at the data in PC coordinates

We start by running the PCA and storing the result in a variable `pca_fit`. There are two issues to consider here. First, the `prcomp()` function can only deal with numeric columns, so we need to remove all non-numeric columns from the data. This is straightforward using the `where(is.numeric)` tidyselect construct. Second, we normally want to scale the data values to unit variance before PCA. We do so by using the argument `scale = TRUE` in `prcomp()`.

```{r}
pca_fit <- gravier_tibble |> 
  select(where(is.numeric))  |>  # retain only numeric columns
  prcomp(scale = TRUE) # do PCA on scaled data
```

Now, we want to plot the data in PC coordinates. In general, this means combining the PC coordinates with the original dataset, so we can color points by categorical variables present in the original data but removed for the PCA.

```{r}
pca_fit |> 
  augment(gravier_tibble) |> 
  ggplot(aes(x = .fittedPC1, y = .fittedPC2, color = y)) + 
  geom_point(size = 1.5) +
  labs(color = "Condition",
       x = "PC1",
       y = "PC2")
```

## Look at the variance explained by each PC

Finally, we’ll plot the variance explained by each PC. We can again extract this information using the `tidy()` function from broom, now by setting the `matrix` argument to `matrix = "eigenvalues"`.

```{r}
pca_fit %>%
  tidy(matrix = "eigenvalues") %>%
  ggplot(aes(PC, percent)) +
  geom_col(fill = "#56B4E9", alpha = 0.8) +
  scale_y_continuous(
    labels = scales::percent_format(),
    expand = expansion(mult = c(0, 0.01))
  ) +
  theme_minimal_hgrid(12)
```

## Conclusion

In the gravier dataset, we have too many genes to extract relevant information with PCA. We should probably extract only significant genes first and repeat the same analysis.
